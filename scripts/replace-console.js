#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã console.log –Ω–∞ –ª–æ–≥–≥–µ—Ä
 * –ó–∞–ø—É—Å–∫: node scripts/replace-console.js
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SRC_DIR = 'src';
const EXCLUDE_DIRS = ['node_modules', '.next', 'dist', 'build'];
const FILE_EXTENSIONS = ['*.ts', '*.tsx'];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
const REPLACEMENTS = [
  // console.log -> logger.info
  {
    pattern: /console\.log\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*(.+?)\s*\)/g,
    replacement: (match, title, data) => `logger.info('${title}', ${data})`,
    description: 'console.log with string and data'
  },
  {
    pattern: /console\.log\s*\(\s*['"`]([^'"`]+)['"`]\s*\)/g,
    replacement: (match, title) => `logger.info('${title}')`,
    description: 'console.log with string only'
  },
  {
    pattern: /console\.log\s*\(\s*(.+?)\s*\)/g,
    replacement: (match, data) => `logger.info('Debug', ${data})`,
    description: 'console.log with data only'
  },
  
  // console.error -> logger.error
  {
    pattern: /console\.error\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*(.+?)\s*\)/g,
    replacement: (match, title, error) => `logger.error('${title}', ${error})`,
    description: 'console.error with string and error'
  },
  {
    pattern: /console\.error\s*\(\s*['"`]([^'"`]+)['"`]\s*\)/g,
    replacement: (match, title) => `logger.error('${title}')`,
    description: 'console.error with string only'
  },
  {
    pattern: /console\.error\s*\(\s*(.+?)\s*\)/g,
    replacement: (match, error) => `logger.error('Error', ${error})`,
    description: 'console.error with error only'
  },
  
  // console.warn -> logger.warning
  {
    pattern: /console\.warn\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*(.+?)\s*\)/g,
    replacement: (match, title, data) => `logger.warning('${title}', ${data})`,
    description: 'console.warn with string and data'
  },
  {
    pattern: /console\.warn\s*\(\s*['"`]([^'"`]+)['"`]\s*\)/g,
    replacement: (match, title) => `logger.warning('${title}')`,
    description: 'console.warn with string only'
  },
  {
    pattern: /console\.warn\s*\(\s*(.+?)\s*\)/g,
    replacement: (match, data) => `logger.warning('Warning', ${data})`,
    description: 'console.warn with data only'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
function getComponentName(filePath) {
  const fileName = path.basename(filePath, path.extname(filePath));
  const dirName = path.dirname(filePath).split(path.sep).pop();
  
  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
  if (fileName.includes('Component') || fileName.includes('Step') || fileName.includes('Modal')) {
    return fileName;
  }
  
  // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  return dirName || fileName;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞
function needsLoggerImport(content) {
  return !content.includes('useLogger') && (
    content.includes('console.log') || 
    content.includes('console.error') || 
    content.includes('console.warn')
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–≥–≥–µ—Ä–∞
function addLoggerImport(content, filePath) {
  const componentName = getComponentName(filePath);
  
  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç
  const importLines = content.split('\n').filter(line => line.trim().startsWith('import'));
  const lastImportIndex = content.lastIndexOf(importLines[importLines.length - 1]);
  
  if (lastImportIndex === -1) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
    return `import { useLogger } from '@/lib/utils/logger';\n\n${content}`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
  const beforeImports = content.substring(0, lastImportIndex + importLines[importLines.length - 1].length);
  const afterImports = content.substring(lastImportIndex + importLines[importLines.length - 1].length);
  
  return `${beforeImports}\nimport { useLogger } from '@/lib/utils/logger';${afterImports}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞
function addLoggerDeclaration(content, filePath) {
  const componentName = getComponentName(filePath);
  
  // –ò—â–µ–º –≥–¥–µ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è —Ö—É–∫–∏ (useState, useEffect –∏ —Ç.–¥.)
  const hookPattern = /const\s+[^=]+=\s+use[A-Z][a-zA-Z]+\(/g;
  const matches = [...content.matchAll(hookPattern)];
  
  if (matches.length === 0) {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ö—É–∫–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    const functionPattern = /function\s+\w+\s*\(/g;
    const functionMatch = content.match(functionPattern);
    
    if (functionMatch) {
      const functionIndex = content.indexOf(functionMatch[0]);
      const openBraceIndex = content.indexOf('{', functionIndex);
      
      if (openBraceIndex !== -1) {
        const beforeBrace = content.substring(0, openBraceIndex + 1);
        const afterBrace = content.substring(openBraceIndex + 1);
        
        return `${beforeBrace}\n    const logger = useLogger('${componentName}');\n${afterBrace}`;
      }
    }
    
    return content;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ö—É–∫–∞
  const firstHook = matches[0];
  const hookIndex = content.indexOf(firstHook[0]);
  const lineEndIndex = content.indexOf('\n', hookIndex);
  
  if (lineEndIndex === -1) {
    return content;
  }
  
  const beforeHook = content.substring(0, lineEndIndex + 1);
  const afterHook = content.substring(lineEndIndex + 1);
  
  return `${beforeHook}    const logger = useLogger('${componentName}');\n${afterHook}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function processFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç
    if (needsLoggerImport(content)) {
      content = addLoggerImport(content, filePath);
      modified = true;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!content.includes('const logger = useLogger')) {
      content = addLoggerDeclaration(content, filePath);
      modified = true;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    REPLACEMENTS.forEach(({ pattern, replacement, description }) => {
      const newContent = content.replace(pattern, replacement);
      if (newContent !== content) {
        console.log(`  ‚úì ${description}`);
        content = newContent;
        modified = true;
      }
    });
    
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å console.log...\n');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
  const files = glob.sync(`${SRC_DIR}/**/*.{ts,tsx}`, {
    ignore: EXCLUDE_DIRS.map(dir => `**/${dir}/**`)
  });
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);
  
  let processedCount = 0;
  let totalReplacements = 0;
  
  files.forEach(filePath => {
    const content = fs.readFileSync(filePath, 'utf8');
    
    if (content.includes('console.log') || content.includes('console.error') || content.includes('console.warn')) {
      console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${filePath}`);
      
      if (processFile(filePath)) {
        processedCount++;
      }
      
      console.log('');
    }
  });
  
  console.log(`\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
  console.log(`\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`);
  console.log(`   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö`);
  console.log(`   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev`);
  console.log(`   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å`);
  console.log(`   4. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ TypeScript –µ—Å–ª–∏ –µ—Å—Ç—å`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { processFile, REPLACEMENTS };
